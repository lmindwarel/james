import {
  VProgressLinear
} from "./chunk-KDHL6W6K.js";
import {
  VWindow,
  VWindowItem
} from "./chunk-L7TJ2LDI.js";
import {
  VImg
} from "./chunk-L7QLYJAA.js";
import "./chunk-UDUWDOZD.js";
import {
  VBtn
} from "./chunk-PZKKGCYZ.js";
import "./chunk-F2GKF7LR.js";
import "./chunk-6WTCDHCV.js";
import "./chunk-SDQGVKLX.js";
import "./chunk-M7F3MEY4.js";
import "./chunk-HUVCJMGT.js";
import "./chunk-SAFIYFMQ.js";
import {
  VDefaultsProvider
} from "./chunk-FLD7QME2.js";
import "./chunk-DYFITYHA.js";
import "./chunk-GWCMY4D6.js";
import "./chunk-FRYW3QMR.js";
import "./chunk-F2IVWHVX.js";
import {
  useProxiedModel
} from "./chunk-IZ7W3NCM.js";
import "./chunk-UCBRT5BW.js";
import "./chunk-BDDQD3Y7.js";
import {
  useLocale
} from "./chunk-CSHNNOLW.js";
import "./chunk-EROE3UNA.js";
import "./chunk-B7I43YVO.js";
import "./chunk-HJLBJ25A.js";
import {
  convertToUnit,
  defineComponent,
  useRender
} from "./chunk-LM4E4B67.js";
import {
  Fragment,
  createVNode,
  mergeProps,
  onMounted,
  ref,
  watch
} from "./chunk-DNXM2JDJ.js";
import {
  init_define_process_env
} from "./chunk-PWHOG2Q4.js";

// dep:vuetify_lib_components_VCarousel_index_mjs
init_define_process_env();

// node_modules/vuetify/lib/components/VCarousel/index.mjs
init_define_process_env();

// node_modules/vuetify/lib/components/VCarousel/VCarousel.mjs
init_define_process_env();
import "/home/antoine/dev/go/src/github.com/james/frontend/node_modules/vuetify/lib/components/VCarousel/VCarousel.css";
var VCarousel = defineComponent({
  name: "VCarousel",
  props: {
    color: String,
    cycle: Boolean,
    delimiterIcon: {
      type: String,
      default: "$delimiter"
    },
    height: {
      type: [Number, String],
      default: 500
    },
    hideDelimiters: Boolean,
    hideDelimiterBackground: Boolean,
    interval: {
      type: [Number, String],
      default: 6e3,
      validator: (value) => value > 0
    },
    modelValue: null,
    progress: [Boolean, String],
    showArrows: {
      type: [Boolean, String],
      default: true,
      validator: (v) => typeof v === "boolean" || v === "hover"
    },
    verticalDelimiters: [Boolean, String]
  },
  emits: {
    "update:modelValue": (val) => true
  },
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const model = useProxiedModel(props, "modelValue");
    const {
      t
    } = useLocale();
    const windowRef = ref();
    let slideTimeout = -1;
    watch(model, restartTimeout);
    watch(() => props.interval, restartTimeout);
    watch(() => props.cycle, (val) => {
      if (val)
        restartTimeout();
      else
        window.clearTimeout(slideTimeout);
    });
    onMounted(startTimeout);
    function startTimeout() {
      if (!props.cycle || !windowRef.value)
        return;
      slideTimeout = window.setTimeout(windowRef.value.group.next, +props.interval > 0 ? +props.interval : 6e3);
    }
    function restartTimeout() {
      window.clearTimeout(slideTimeout);
      window.requestAnimationFrame(startTimeout);
    }
    useRender(() => createVNode(VWindow, {
      "ref": windowRef,
      "modelValue": model.value,
      "onUpdate:modelValue": ($event) => model.value = $event,
      "class": ["v-carousel", {
        "v-carousel--hide-delimiter-background": props.hideDelimiterBackground,
        "v-carousel--vertical-delimiters": props.verticalDelimiters
      }],
      "style": {
        height: convertToUnit(props.height)
      },
      "continuous": true,
      "showArrows": props.showArrows,
      "mandatory": "force"
    }, {
      default: slots.default,
      additional: (_ref2) => {
        let {
          group
        } = _ref2;
        return createVNode(Fragment, null, [!props.hideDelimiters && createVNode("div", {
          "class": "v-carousel__controls",
          "style": {
            left: props.verticalDelimiters === "left" && props.verticalDelimiters ? 0 : "auto",
            right: props.verticalDelimiters === "right" ? 0 : "auto"
          }
        }, [group.items.value.length > 0 && createVNode(VDefaultsProvider, {
          "defaults": {
            VBtn: {
              color: props.color,
              icon: props.delimiterIcon,
              size: "x-small",
              variant: "text"
            }
          },
          "scoped": true
        }, {
          default: () => [group.items.value.map((item) => {
            const props2 = {
              "aria-label": t("$vuetify.carousel.ariaLabel.delimiter"),
              class: [group.isSelected(item.id) && "v-btn--selected"],
              onClick: () => group.select(item.id, true)
            };
            return slots.item ? slots.item({
              props: props2,
              item
            }) : createVNode(VBtn, mergeProps(item, props2), null);
          })]
        })]), props.progress && createVNode(VProgressLinear, {
          "class": "v-carousel__progress",
          "color": typeof props.progress === "string" ? props.progress : void 0,
          "modelValue": (group.getItemIndex(model.value) + 1) / group.items.value.length * 100
        }, null)]);
      },
      prev: slots.prev,
      next: slots.next
    }));
  }
});

// node_modules/vuetify/lib/components/VCarousel/VCarouselItem.mjs
init_define_process_env();
var VCarouselItem = defineComponent({
  name: "VCarouselItem",
  inheritAttrs: false,
  props: {
    value: null
  },
  setup(props, _ref) {
    let {
      slots,
      attrs
    } = _ref;
    useRender(() => createVNode(VWindowItem, {
      "class": "v-carousel-item",
      "value": props.value
    }, {
      default: () => [createVNode(VImg, attrs, slots)]
    }));
  }
});
export {
  VCarousel,
  VCarouselItem
};
//# sourceMappingURL=vuetify_lib_components_VCarousel_index_mjs.js.map
